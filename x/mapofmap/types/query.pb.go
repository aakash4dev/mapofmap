// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mapofmap/mapofmap/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetExecutionlayersRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetExecutionlayersRequest) Reset()         { *m = QueryGetExecutionlayersRequest{} }
func (m *QueryGetExecutionlayersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionlayersRequest) ProtoMessage()    {}
func (*QueryGetExecutionlayersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{2}
}
func (m *QueryGetExecutionlayersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionlayersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionlayersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionlayersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionlayersRequest.Merge(m, src)
}
func (m *QueryGetExecutionlayersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionlayersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionlayersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionlayersRequest proto.InternalMessageInfo

func (m *QueryGetExecutionlayersRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetExecutionlayersResponse struct {
	Executionlayers Executionlayers `protobuf:"bytes,1,opt,name=executionlayers,proto3" json:"executionlayers"`
}

func (m *QueryGetExecutionlayersResponse) Reset()         { *m = QueryGetExecutionlayersResponse{} }
func (m *QueryGetExecutionlayersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExecutionlayersResponse) ProtoMessage()    {}
func (*QueryGetExecutionlayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{3}
}
func (m *QueryGetExecutionlayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExecutionlayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExecutionlayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExecutionlayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExecutionlayersResponse.Merge(m, src)
}
func (m *QueryGetExecutionlayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExecutionlayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExecutionlayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExecutionlayersResponse proto.InternalMessageInfo

func (m *QueryGetExecutionlayersResponse) GetExecutionlayers() Executionlayers {
	if m != nil {
		return m.Executionlayers
	}
	return Executionlayers{}
}

type QueryAllExecutionlayersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutionlayersRequest) Reset()         { *m = QueryAllExecutionlayersRequest{} }
func (m *QueryAllExecutionlayersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExecutionlayersRequest) ProtoMessage()    {}
func (*QueryAllExecutionlayersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{4}
}
func (m *QueryAllExecutionlayersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutionlayersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutionlayersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutionlayersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutionlayersRequest.Merge(m, src)
}
func (m *QueryAllExecutionlayersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutionlayersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutionlayersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutionlayersRequest proto.InternalMessageInfo

func (m *QueryAllExecutionlayersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExecutionlayersResponse struct {
	Executionlayers []Executionlayers   `protobuf:"bytes,1,rep,name=executionlayers,proto3" json:"executionlayers"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExecutionlayersResponse) Reset()         { *m = QueryAllExecutionlayersResponse{} }
func (m *QueryAllExecutionlayersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExecutionlayersResponse) ProtoMessage()    {}
func (*QueryAllExecutionlayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{5}
}
func (m *QueryAllExecutionlayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExecutionlayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExecutionlayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExecutionlayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExecutionlayersResponse.Merge(m, src)
}
func (m *QueryAllExecutionlayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExecutionlayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExecutionlayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExecutionlayersResponse proto.InternalMessageInfo

func (m *QueryAllExecutionlayersResponse) GetExecutionlayers() []Executionlayers {
	if m != nil {
		return m.Executionlayers
	}
	return nil
}

func (m *QueryAllExecutionlayersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChainidRequest struct {
	Batchnumber string `protobuf:"bytes,1,opt,name=batchnumber,proto3" json:"batchnumber,omitempty"`
}

func (m *QueryChainidRequest) Reset()         { *m = QueryChainidRequest{} }
func (m *QueryChainidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainidRequest) ProtoMessage()    {}
func (*QueryChainidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{6}
}
func (m *QueryChainidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainidRequest.Merge(m, src)
}
func (m *QueryChainidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainidRequest proto.InternalMessageInfo

func (m *QueryChainidRequest) GetBatchnumber() string {
	if m != nil {
		return m.Batchnumber
	}
	return ""
}

type QueryChainidResponse struct {
	Proof string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryChainidResponse) Reset()         { *m = QueryChainidResponse{} }
func (m *QueryChainidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainidResponse) ProtoMessage()    {}
func (*QueryChainidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{7}
}
func (m *QueryChainidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainidResponse.Merge(m, src)
}
func (m *QueryChainidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainidResponse proto.InternalMessageInfo

func (m *QueryChainidResponse) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type QueryGetbatchRequest struct {
	Chainid     string `protobuf:"bytes,1,opt,name=chainid,proto3" json:"chainid,omitempty"`
	Batchnumber string `protobuf:"bytes,2,opt,name=batchnumber,proto3" json:"batchnumber,omitempty"`
}

func (m *QueryGetbatchRequest) Reset()         { *m = QueryGetbatchRequest{} }
func (m *QueryGetbatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetbatchRequest) ProtoMessage()    {}
func (*QueryGetbatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{8}
}
func (m *QueryGetbatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetbatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetbatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetbatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetbatchRequest.Merge(m, src)
}
func (m *QueryGetbatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetbatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetbatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetbatchRequest proto.InternalMessageInfo

func (m *QueryGetbatchRequest) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

func (m *QueryGetbatchRequest) GetBatchnumber() string {
	if m != nil {
		return m.Batchnumber
	}
	return ""
}

type QueryGetbatchResponse struct {
	Proof string `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryGetbatchResponse) Reset()         { *m = QueryGetbatchResponse{} }
func (m *QueryGetbatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetbatchResponse) ProtoMessage()    {}
func (*QueryGetbatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3adb9eba234fd0e3, []int{9}
}
func (m *QueryGetbatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetbatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetbatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetbatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetbatchResponse.Merge(m, src)
}
func (m *QueryGetbatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetbatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetbatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetbatchResponse proto.InternalMessageInfo

func (m *QueryGetbatchResponse) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mapofmap.mapofmap.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mapofmap.mapofmap.QueryParamsResponse")
	proto.RegisterType((*QueryGetExecutionlayersRequest)(nil), "mapofmap.mapofmap.QueryGetExecutionlayersRequest")
	proto.RegisterType((*QueryGetExecutionlayersResponse)(nil), "mapofmap.mapofmap.QueryGetExecutionlayersResponse")
	proto.RegisterType((*QueryAllExecutionlayersRequest)(nil), "mapofmap.mapofmap.QueryAllExecutionlayersRequest")
	proto.RegisterType((*QueryAllExecutionlayersResponse)(nil), "mapofmap.mapofmap.QueryAllExecutionlayersResponse")
	proto.RegisterType((*QueryChainidRequest)(nil), "mapofmap.mapofmap.QueryChainidRequest")
	proto.RegisterType((*QueryChainidResponse)(nil), "mapofmap.mapofmap.QueryChainidResponse")
	proto.RegisterType((*QueryGetbatchRequest)(nil), "mapofmap.mapofmap.QueryGetbatchRequest")
	proto.RegisterType((*QueryGetbatchResponse)(nil), "mapofmap.mapofmap.QueryGetbatchResponse")
}

func init() { proto.RegisterFile("mapofmap/mapofmap/query.proto", fileDescriptor_3adb9eba234fd0e3) }

var fileDescriptor_3adb9eba234fd0e3 = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xc7, 0xe3, 0xfe, 0x7e, 0x4d, 0xe1, 0x3a, 0x54, 0x1c, 0x41, 0x6a, 0x0c, 0xb8, 0xe5, 0x04,
	0x4d, 0x14, 0x15, 0x1f, 0x49, 0x04, 0x1d, 0x98, 0x5a, 0x04, 0xd9, 0x50, 0xf1, 0xc8, 0x76, 0x49,
	0xaf, 0x8e, 0x25, 0xc7, 0xe7, 0xda, 0x0e, 0x4a, 0x88, 0xb2, 0x30, 0x31, 0x30, 0x20, 0xb1, 0xf1,
	0x0f, 0xb0, 0xf0, 0x37, 0x30, 0x77, 0xac, 0xc4, 0xc2, 0x84, 0x50, 0xc2, 0x1f, 0x82, 0x72, 0xf7,
	0xdc, 0xc6, 0x4e, 0x1c, 0x0b, 0xb1, 0xf9, 0xee, 0xbe, 0xef, 0xfb, 0x3e, 0xaf, 0xef, 0xbd, 0x06,
	0xdd, 0xed, 0x31, 0x5f, 0x9c, 0xf6, 0x98, 0x4f, 0x2f, 0x3f, 0xce, 0xfa, 0x3c, 0x18, 0x9a, 0x7e,
	0x20, 0x22, 0x81, 0x6f, 0xc4, 0xb7, 0x66, 0xfc, 0xa1, 0x97, 0x6c, 0x61, 0x0b, 0xf9, 0x4a, 0x67,
	0x5f, 0x4a, 0xa8, 0xdf, 0xb1, 0x85, 0xb0, 0x5d, 0x4e, 0x99, 0xef, 0x50, 0xe6, 0x79, 0x22, 0x62,
	0x91, 0x23, 0xbc, 0x10, 0x5e, 0x6b, 0x1d, 0x11, 0xf6, 0x44, 0x48, 0xdb, 0x2c, 0xe4, 0xca, 0x9f,
	0xbe, 0xa9, 0xb7, 0x79, 0xc4, 0xea, 0xd4, 0x67, 0xb6, 0xe3, 0x49, 0x31, 0x68, 0x8d, 0x45, 0x22,
	0x9f, 0x05, 0xac, 0x17, 0x7b, 0x55, 0x16, 0xdf, 0xf9, 0x80, 0x77, 0xfa, 0x33, 0x0b, 0x97, 0x0d,
	0x79, 0x00, 0x42, 0x52, 0x42, 0xf8, 0xd5, 0x2c, 0xd5, 0xb1, 0x8c, 0xb6, 0xf8, 0x59, 0x9f, 0x87,
	0x11, 0x79, 0x89, 0x6e, 0x26, 0x6e, 0x43, 0x5f, 0x78, 0x21, 0xc7, 0x07, 0xa8, 0xa8, 0xb2, 0x6c,
	0x6b, 0xbb, 0x5a, 0x75, 0xb3, 0x51, 0x36, 0x17, 0x2a, 0x37, 0x55, 0xc8, 0xd1, 0xff, 0xe7, 0x3f,
	0x77, 0x0a, 0x16, 0xc8, 0xc9, 0x13, 0x64, 0x48, 0xbf, 0x16, 0x8f, 0x9e, 0x27, 0x31, 0x20, 0x23,
	0x2e, 0xa1, 0x75, 0xc7, 0x3b, 0xe1, 0x03, 0xe9, 0x7c, 0xdd, 0x52, 0x07, 0xd2, 0x47, 0x3b, 0x99,
	0x71, 0xc0, 0x64, 0xa1, 0xad, 0x54, 0x65, 0x00, 0x47, 0x96, 0xc0, 0xa5, 0x4c, 0x80, 0x32, 0x6d,
	0x40, 0xba, 0x80, 0x7b, 0xe8, 0xba, 0x19, 0xb8, 0x2f, 0x10, 0xba, 0xea, 0x09, 0x24, 0xdc, 0x33,
	0x55, 0x03, 0xcd, 0x59, 0x03, 0x4d, 0x35, 0x20, 0xd0, 0x40, 0xf3, 0x98, 0xd9, 0x1c, 0x62, 0xad,
	0xb9, 0x48, 0xf2, 0x4d, 0x83, 0x0a, 0x97, 0xa5, 0x5a, 0x55, 0xe1, 0x7f, 0xff, 0x54, 0x21, 0x6e,
	0x25, 0xf8, 0xd7, 0x24, 0x7f, 0x25, 0x97, 0x5f, 0x01, 0x25, 0x0a, 0x38, 0x80, 0x49, 0x79, 0xd6,
	0x65, 0x8e, 0xe7, 0x9c, 0xc4, 0x7f, 0x9f, 0x5d, 0xb4, 0xd9, 0x66, 0x51, 0xa7, 0xeb, 0xf5, 0x7b,
	0x6d, 0x1e, 0x40, 0x53, 0xe7, 0xaf, 0xc8, 0x3e, 0x2a, 0x25, 0x03, 0xa1, 0xda, 0x12, 0x5a, 0xf7,
	0x03, 0x21, 0x4e, 0xe3, 0x41, 0x90, 0x07, 0x62, 0x81, 0xba, 0xc5, 0x23, 0x69, 0x12, 0xe7, 0xd9,
	0x46, 0x1b, 0x1d, 0x65, 0x00, 0xfa, 0xf8, 0x98, 0x26, 0x58, 0x5b, 0x24, 0x78, 0x88, 0x6e, 0xa5,
	0x3c, 0x57, 0x21, 0x34, 0xde, 0x17, 0xd1, 0xba, 0xd4, 0xe3, 0xb7, 0xa8, 0xa8, 0xa6, 0x1c, 0x3f,
	0x58, 0xd2, 0x81, 0xc5, 0x75, 0xd2, 0xf7, 0xf2, 0x64, 0x2a, 0x31, 0xb9, 0xf7, 0xee, 0xfb, 0xef,
	0x4f, 0x6b, 0xb7, 0x71, 0x99, 0x66, 0xad, 0x37, 0xfe, 0xaa, 0xa1, 0xad, 0x54, 0x8f, 0x71, 0x3d,
	0xcb, 0x3e, 0x73, 0xdd, 0xf4, 0xc6, 0xdf, 0x84, 0x00, 0x5d, 0x43, 0xd2, 0xed, 0xe3, 0x1a, 0xcd,
	0xfd, 0xe7, 0x42, 0x47, 0x72, 0x7f, 0xc7, 0xf8, 0x8b, 0x86, 0x70, 0xca, 0xef, 0xd0, 0x75, 0xb3,
	0x89, 0x33, 0x37, 0x2e, 0x9b, 0x38, 0x7b, 0x73, 0x48, 0x4d, 0x12, 0xdf, 0xc7, 0x24, 0x9f, 0x18,
	0x7f, 0xd0, 0xd0, 0x06, 0xcc, 0x22, 0xce, 0xec, 0x57, 0x72, 0xca, 0xf5, 0x4a, 0xae, 0x0e, 0x40,
	0x1e, 0x49, 0x90, 0x1a, 0xae, 0x2e, 0x01, 0x81, 0x81, 0xa5, 0xa3, 0xb9, 0xd9, 0x1c, 0xe3, 0xcf,
	0x1a, 0xba, 0x16, 0x0f, 0x26, 0xae, 0xac, 0xe8, 0xd6, 0xfc, 0x3a, 0xe8, 0xd5, 0x7c, 0x21, 0x10,
	0x3d, 0x95, 0x44, 0x8f, 0x71, 0x73, 0x09, 0x91, 0x0d, 0x62, 0x3a, 0x02, 0xb6, 0x71, 0x12, 0xee,
	0xa8, 0x79, 0x3e, 0x31, 0xb4, 0x8b, 0x89, 0xa1, 0xfd, 0x9a, 0x18, 0xda, 0xc7, 0xa9, 0x51, 0xb8,
	0x98, 0x1a, 0x85, 0x1f, 0x53, 0xa3, 0xf0, 0xba, 0x7c, 0x69, 0x32, 0xb8, 0xf2, 0x8b, 0x86, 0x3e,
	0x0f, 0xdb, 0x45, 0xf9, 0x83, 0xd3, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x4a, 0x18, 0xfb, 0xce,
	0x4d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Executionlayers items.
	Executionlayers(ctx context.Context, in *QueryGetExecutionlayersRequest, opts ...grpc.CallOption) (*QueryGetExecutionlayersResponse, error)
	ExecutionlayersAll(ctx context.Context, in *QueryAllExecutionlayersRequest, opts ...grpc.CallOption) (*QueryAllExecutionlayersResponse, error)
	// Queries a list of Chainid items.
	Chainid(ctx context.Context, in *QueryChainidRequest, opts ...grpc.CallOption) (*QueryChainidResponse, error)
	// Queries a list of Getbatch items.
	Getbatch(ctx context.Context, in *QueryGetbatchRequest, opts ...grpc.CallOption) (*QueryGetbatchResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mapofmap.mapofmap.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Executionlayers(ctx context.Context, in *QueryGetExecutionlayersRequest, opts ...grpc.CallOption) (*QueryGetExecutionlayersResponse, error) {
	out := new(QueryGetExecutionlayersResponse)
	err := c.cc.Invoke(ctx, "/mapofmap.mapofmap.Query/Executionlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutionlayersAll(ctx context.Context, in *QueryAllExecutionlayersRequest, opts ...grpc.CallOption) (*QueryAllExecutionlayersResponse, error) {
	out := new(QueryAllExecutionlayersResponse)
	err := c.cc.Invoke(ctx, "/mapofmap.mapofmap.Query/ExecutionlayersAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Chainid(ctx context.Context, in *QueryChainidRequest, opts ...grpc.CallOption) (*QueryChainidResponse, error) {
	out := new(QueryChainidResponse)
	err := c.cc.Invoke(ctx, "/mapofmap.mapofmap.Query/Chainid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Getbatch(ctx context.Context, in *QueryGetbatchRequest, opts ...grpc.CallOption) (*QueryGetbatchResponse, error) {
	out := new(QueryGetbatchResponse)
	err := c.cc.Invoke(ctx, "/mapofmap.mapofmap.Query/Getbatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Executionlayers items.
	Executionlayers(context.Context, *QueryGetExecutionlayersRequest) (*QueryGetExecutionlayersResponse, error)
	ExecutionlayersAll(context.Context, *QueryAllExecutionlayersRequest) (*QueryAllExecutionlayersResponse, error)
	// Queries a list of Chainid items.
	Chainid(context.Context, *QueryChainidRequest) (*QueryChainidResponse, error)
	// Queries a list of Getbatch items.
	Getbatch(context.Context, *QueryGetbatchRequest) (*QueryGetbatchResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Executionlayers(ctx context.Context, req *QueryGetExecutionlayersRequest) (*QueryGetExecutionlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Executionlayers not implemented")
}
func (*UnimplementedQueryServer) ExecutionlayersAll(ctx context.Context, req *QueryAllExecutionlayersRequest) (*QueryAllExecutionlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionlayersAll not implemented")
}
func (*UnimplementedQueryServer) Chainid(ctx context.Context, req *QueryChainidRequest) (*QueryChainidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chainid not implemented")
}
func (*UnimplementedQueryServer) Getbatch(ctx context.Context, req *QueryGetbatchRequest) (*QueryGetbatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getbatch not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapofmap.mapofmap.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Executionlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExecutionlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Executionlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapofmap.mapofmap.Query/Executionlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Executionlayers(ctx, req.(*QueryGetExecutionlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutionlayersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExecutionlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutionlayersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapofmap.mapofmap.Query/ExecutionlayersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutionlayersAll(ctx, req.(*QueryAllExecutionlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Chainid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Chainid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapofmap.mapofmap.Query/Chainid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Chainid(ctx, req.(*QueryChainidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Getbatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetbatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Getbatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapofmap.mapofmap.Query/Getbatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Getbatch(ctx, req.(*QueryGetbatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapofmap.mapofmap.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Executionlayers",
			Handler:    _Query_Executionlayers_Handler,
		},
		{
			MethodName: "ExecutionlayersAll",
			Handler:    _Query_ExecutionlayersAll_Handler,
		},
		{
			MethodName: "Chainid",
			Handler:    _Query_Chainid_Handler,
		},
		{
			MethodName: "Getbatch",
			Handler:    _Query_Getbatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapofmap/mapofmap/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionlayersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionlayersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionlayersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExecutionlayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExecutionlayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExecutionlayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Executionlayers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutionlayersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutionlayersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutionlayersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExecutionlayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExecutionlayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExecutionlayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Executionlayers) > 0 {
		for iNdEx := len(m.Executionlayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Executionlayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batchnumber) > 0 {
		i -= len(m.Batchnumber)
		copy(dAtA[i:], m.Batchnumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Batchnumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetbatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetbatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetbatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batchnumber) > 0 {
		i -= len(m.Batchnumber)
		copy(dAtA[i:], m.Batchnumber)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Batchnumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chainid) > 0 {
		i -= len(m.Chainid)
		copy(dAtA[i:], m.Chainid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chainid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetbatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetbatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetbatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetExecutionlayersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExecutionlayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Executionlayers.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExecutionlayersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExecutionlayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Executionlayers) > 0 {
		for _, e := range m.Executionlayers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Batchnumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetbatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chainid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Batchnumber)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetbatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionlayersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionlayersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionlayersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExecutionlayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExecutionlayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExecutionlayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executionlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Executionlayers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutionlayersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutionlayersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutionlayersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExecutionlayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExecutionlayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExecutionlayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executionlayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executionlayers = append(m.Executionlayers, Executionlayers{})
			if err := m.Executionlayers[len(m.Executionlayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batchnumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batchnumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetbatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetbatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetbatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chainid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batchnumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batchnumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetbatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetbatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetbatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
